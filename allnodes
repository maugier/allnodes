#!/usr/bin/env python3

import argparse
import multiprocessing
import os
from subprocess import Popen, DEVNULL, PIPE, TimeoutExpired
import sys
from termcolor import colored
from threading import Thread
from time import sleep


def file_nodes(filename):
    return open(filename, 'r') 

def pbs_nodes():
    raise NotImplementedError("PBS Nodes not yet implemented")

def cluster(name):
    try:
        return open(os.environ['HOME'] + "/.nodes/" + name)
    except:
        return open('/etc/nodes/' + name)


node_methods = {'file': file_nodes,
                'pbs': pbs_nodes,
                'cluster': cluster }

colormap = {0 : 'green', 255: 'magenta', 'default': 'red', None: 'yellow'}

parser = argparse.ArgumentParser(description="Run a command over multiple SSH hosts")
parser.add_argument('-v', '--verbose', help="Forward stderr and stdout to here", action='store_true')
parser_summary = parser.add_mutually_exclusive_group(required=False)
parser_summary.add_argument('-q', '--quiet', help="Do not show summary of exit codes", action='store_true')
parser_summary.add_argument('-m', '--monitor', help="Continuously update nodes summary", action='store_true')
parser_ssh = parser.add_mutually_exclusive_group(required=False)
parser_ssh.add_argument('-n', '--nossh', help="Run command locally, substituting {} for the hostname", action='store_true')
parser_ssh.add_argument('-u', '--user', help="Change default SSH user")
parser_hostsource = parser.add_mutually_exclusive_group(required=False)
parser_hostsource.add_argument('-f', '--hostfile', help="Read node names from a text file")
parser_hostsource.add_argument('-c', '--cluster', help="Read node names from a cluster provider")
parser.add_argument('command', nargs='+' )

pool = []

def decorate_output(reader, writer, label):
    for line in reader:
        writer.write(label + b': ' + line)

def run_child(node, args):
    if args.nossh:
        command = [ (w == '{}') and node or w for w in args.command ]
    else:
        command = ['ssh', node] + args.command

    if args.verbose:
        child = Popen(command, stdout=PIPE, stderr=PIPE)

        outt = Thread(target=decorate_output, args=[child.stdout, sys.stdout.buffer, node.encode('ascii')])
        pool.append(outt)
        outt.start()

        errt = Thread(target=decorate_output, args=[child.stderr, sys.stderr.buffer, node.encode('ascii')])
        pool.append(errt)
        errt.start()

        return child

    else:
        return Popen(command, stdout=DEVNULL, stderr=DEVNULL)

def show_output(nodes, children, length=80):
    bl = 0
    buffer = ""
    for (n,r) in zip(nodes, (c.returncode for c in children)):
        msg = n + "[" + ((r is None) and '...' or "{0: 3d}".format(r)) + "]  "
        l = len(msg) 
        if (l + bl > length):
            print(buffer)
            buffer = ""
            bl = 0

        bl += l
        buffer += colored(msg, colormap.get(r, colormap['default']), None, ['bold'])

    print(buffer)


    


def main():
    args = parser.parse_args()
    if args.hostfile is not None:
        nodes = file_nodes(args.hostfile)
    elif args.cluster is not None:
        nodes = cluster(args.cluster)
    else:
        nodes = cluster('default')

    nodes = [ n.strip() for n in nodes ]

    children = [ run_child(n, args) for n in nodes ]

    if args.monitor:
        while True:
            for c in children:
                c.poll()

            show_output(nodes, children)

            if all (c.returncode is not None for c in children):
                break

            sleep(1)

    else:
        for c in children:
            c.wait()

        if args.verbose:
            for t in pool:
                t.join()

        show_output(nodes, children)

            


if __name__ == '__main__':
    main()


# vim: set ts=4 et:
