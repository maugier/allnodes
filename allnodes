#!/usr/bin/env python3

import argparse
import multiprocessing
import os
from subprocess import Popen, DEVNULL, PIPE, TimeoutExpired
from termcolor import colored
from time import sleep


def file_nodes(filename):
    return open(filename, 'r') 

def pbs_nodes():
    raise NotImplementedError("PBS Nodes not yet implemented")

def cluster(name):
    try:
        return open(os.environ['HOME'] + "/.nodes/" + name)
    except:
        return open('/etc/nodes/' + name)


node_methods = {'file': file_nodes,
                'pbs': pbs_nodes,
                'cluster': cluster }

colormap = {0 : 'green', 255: 'magenta', 'default': 'red', None: 'yellow'}

parser = argparse.ArgumentParser(description="Run a command over multiple SSH hosts")
parser.add_argument('-v', '--verbose', help="Forward stderr and stdout to here", action='store_true')
parser_summary = parser.add_mutually_exclusive_group(required=False)
parser_summary.add_argument('-q', '--quiet', help="Do not show summary of exit codes", action='store_true')
parser_summary.add_argument('-m', '--monitor', help="Continuously update nodes summary", action='store_true')
parser_ssh = parser.add_mutually_exclusive_group(required=False)
parser_ssh.add_argument('-n', '--nossh', help="Run command locally, substituting {} for the hostname", action='store_true')
parser_ssh.add_argument('-u', '--user', help="Change default SSH user")
parser_hostsource = parser.add_mutually_exclusive_group(required=False)
parser_hostsource.add_argument('-f', '--hostfile', help="Read node names from a text file")
parser_hostsource.add_argument('-c', '--cluster', help="Read node names from a cluster provider")
parser.add_argument('command', nargs='+' )

def run_child(node, args):
    if args.nossh:
        command = [ (w == '{}') and node or w for w in args.command ]
    else:
        command = ['ssh', node] + args.command

    if args.verbose:
        raise NotImplementedError("Verbose not implemented")
    else:
        return Popen(command, stdout=DEVNULL, stderr=DEVNULL)

def show_output(nodes, children, length=80):
    bl = 0
    buffer = ""
    for (n,r) in zip(nodes, (c.returncode for c in children)):
        msg = n + " (" + ((r is None) and '...' or "{0: 3d}".format(r)) + ") "
        l = len(msg) 
        if (l + bl > length):
            print(buffer)
            buffer = ""
            bl = 0

        bl += l
        buffer += colored(msg, colormap.get(r, colormap['default']), None, ['bold'])

    print(buffer)


    


def main():
    args = parser.parse_args()
    if args.hostfile is not None:
        nodes = file_nodes(args.hostfile)
    elif args.cluster is not None:
        nodes = cluster(args.cluster)
    else:
        nodes = cluster('default')

    nodes = [ n.strip() for n in nodes ]

    children = [ run_child(n, args) for n in nodes ]

    if args.monitor:
        while any(c.returncode is None for c in children):
            sleep(1)
            for c in children:
                if c.returncode is None:
                    try:
                        c.wait(0)
                    except TimeoutExpired:
                        pass

            show_output(nodes, children)

    else:
        for c in children:
            c.wait()
        show_output(nodes, children)
            


if __name__ == '__main__':
    main()


# vim: set ts=4 et:
